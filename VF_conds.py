'''
This code creates pre-determined (psuedorandomized) experimental conditions for each participant 
in an increment threshold experiment, using Pokorny & Smith's (1997) 
pulsed and steady pedestal paradigms.
'''
# ====================== Conditions: Fixed Frame  ============================ #
re=(26, 0, 0); gn=(0, 13, 0) # 502D (Bacground Lum_Min_4 cd/m2)
pulsed = 1; steady = 2
upperR = 3.6; lowerL = -3.6 
c1=0; c2=0.08; c3=0.16; c4=0.32; c5=0.48; c6=0.64 

colorCond = [re, gn];  colorCond_rev= [gn, re]
Pedestal = [pulsed, steady];  Pedestal_rev = [steady, pulsed]
Positions = [upperR, lowerL]; Positions_rev = [lowerL, upperR]
contP = [c1,c2,c3,c4,c5,c6]; contS = contP[1:6] 

#r: red, g: green
#p: pulsed, s: steady
#h: upper field, l: lower field
rph,rsh,gph,gsh = [[[],[],[],[],[],[],[],[],[]] for _ in range(4)]
gpl,rpl,gsl,rsl = [[[],[],[],[],[],[],[],[],[]] for _ in range(4)]
# pulsed/steady frames for 1 person (12*3=36 RP conditions 36 GP conditions)
for ncp in range(9): #each condition 9 times (9 reps) 
    for c in range(len(contP)): # 6 contrasts
        for f in range(len(Positions)): # 2 positions
            rph[ncp].append([re, pulsed, Positions[f]])
            rpl[ncp].append([re, pulsed, Positions_rev[f]])
            gph[ncp].append([gn, pulsed, Positions[f]])
            gpl[ncp].append([gn, pulsed, Positions_rev[f]])
#print(*rph, sep='\n')
#print(len(rph), len(rph[0]))

for ncs in range(9): #each condition 9 times
    for c in range(len(contS)): # 5 contrasts
        for f in range(len(Positions)): # 2 sf
            rsh[ncs].append([re, steady, Positions[f]])
            rsl[ncs].append([re, steady, Positions_rev[f]])
            gsh[ncs].append([gn, steady, Positions[f]])
            gsl[ncs].append([gn, steady, Positions_rev[f]])

# Pseudo-randomized contrasts for pulsed- and steady-pedestal paradigms
CP= [[0.64, 0.48, 0.08, 0.32, 0, 0.16], [0.08, 0.16, 0, 0.64, 0.48, 0.32], [0.16, 0.32, 0.64, 0.08, 0, 0.48], [0.16, 0.32, 0.48, 0.64, 0.08, 0], 
    [0.08, 0, 0.64, 0.48, 0.16, 0.32], [0.32, 0.64, 0, 0.48, 0.08, 0.16], [0.32, 0.48, 0, 0.64, 0.16, 0.08], [0.08, 0.48, 0.32, 0, 0.16, 0.64], 
    [0.32, 0.64, 0.48, 0.16, 0.08, 0], [0, 0.08, 0.64, 0.32, 0.16, 0.48], [0.32, 0.08, 0.48, 0.64, 0.16, 0], [0.08, 0.16, 0.48, 0.64, 0.32, 0], 
    [0.64, 0, 0.48, 0.08, 0.32, 0.16], [0.16, 0.32, 0.08, 0, 0.48, 0.64], [0.48, 0, 0.64, 0.08, 0.32, 0.16], [0.16, 0.08, 0.64, 0.48, 0.32, 0], 
    [0.48, 0, 0.16, 0.08, 0.32, 0.64], [0.08, 0, 0.32, 0.64, 0.48, 0.16], [0.16, 0, 0.08, 0.64, 0.32, 0.48], [0.48, 0.08, 0.64, 0.16, 0, 0.32], 
    [0.32, 0, 0.48, 0.08, 0.16, 0.64], [0.64, 0.32, 0.48, 0.16, 0.08, 0], [0.16, 0.32, 0.08, 0, 0.64, 0.48], [0.64, 0.08, 0.16, 0.32, 0, 0.48], 
    [0.48, 0.64, 0.32, 0.16, 0, 0.08], [0.32, 0, 0.64, 0.48, 0.16, 0.08], [0.32, 0, 0.16, 0.08, 0.48, 0.64], [0.32, 0.08, 0.48, 0, 0.16, 0.64], 
    [0, 0.16, 0.32, 0.64, 0.08, 0.48], [0.32, 0.08, 0, 0.16, 0.64, 0.48], [0.16, 0.48, 0.64, 0.32, 0, 0.08], [0.32, 0.64, 0, 0.48, 0.16, 0.08], 
    [0.48, 0.08, 0.32, 0.16, 0.64, 0], [0.64, 0.48, 0, 0.16, 0.08, 0.32], [0.08, 0, 0.64, 0.16, 0.48, 0.32], [0.64, 0, 0.16, 0.48, 0.08, 0.32], 
    [0.48, 0.64, 0.08, 0, 0.16, 0.32], [0.08, 0.32, 0.16, 0.48, 0, 0.64], [0.64, 0.16, 0, 0.08, 0.48, 0.32], [0.64, 0.48, 0.08, 0.16, 0, 0.32], 
    [0.32, 0.08, 0, 0.16, 0.48, 0.64], [0.16, 0.64, 0.32, 0.08, 0.48, 0], [0.08, 0, 0.16, 0.64, 0.48, 0.32], [0.32, 0.08, 0, 0.64, 0.48, 0.16], 
    [0, 0.32, 0.64, 0.16, 0.48, 0.08], [0.48, 0.32, 0.64, 0.16, 0.08, 0], [0, 0.64, 0.32, 0.16, 0.48, 0.08], [0.32, 0.64, 0.16, 0.48, 0, 0.08], 
    [0, 0.16, 0.64, 0.48, 0.08, 0.32], [0.48, 0.64, 0, 0.08, 0.32, 0.16], [0.64, 0, 0.16, 0.48, 0.08, 0.32], [0.16, 0.64, 0.48, 0, 0.08, 0.32], 
    [0, 0.48, 0.08, 0.32, 0.16, 0.64], [0.48, 0.64, 0.16, 0.08, 0.32, 0], [0.64, 0.48, 0, 0.16, 0.32, 0.08], [0.08, 0.16, 0.64, 0, 0.32, 0.48], 
    [0.16, 0.08, 0.64, 0.32, 0, 0.48], [0.16, 0.64, 0.48, 0.08, 0.32, 0], [0.32, 0.48, 0.64, 0, 0.16, 0.08], [0.16, 0, 0.08, 0.48, 0.64, 0.32], 
    [0.64, 0.32, 0.16, 0.08, 0, 0.48], [0.64, 0.32, 0.16, 0.08, 0.48, 0], [0.16, 0.08, 0.48, 0.32, 0.64, 0], [0.32, 0.64, 0, 0.16, 0.48, 0.08], 
    [0.48, 0.64, 0.16, 0.32, 0.08, 0], [0.32, 0.16, 0.64, 0.48, 0.08, 0], [0.16, 0.08, 0, 0.64, 0.32, 0.48], [0, 0.64, 0.32, 0.48, 0.08, 0.16], 
    [0.16, 0.32, 0.48, 0.64, 0, 0.08], [0.08, 0.64, 0.16, 0, 0.32, 0.48], [0.64, 0.48, 0, 0.16, 0.32, 0.08], [0.16, 0.64, 0.32, 0.48, 0, 0.08]]

#Contrasts for Steady 
CS= [[0.32, 0.64, 0.48, 0.08, 0.16], [0.32, 0.08, 0.16, 0.64, 0.48], [0.48, 0.08, 0.64, 0.16, 0.32], [0.16, 0.08, 0.64, 0.32, 0.48], 
    [0.64, 0.16, 0.48, 0.32, 0.08], [0.16, 0.32, 0.48, 0.64, 0.08], [0.16, 0.08, 0.32, 0.48, 0.64], [0.08, 0.48, 0.64, 0.32, 0.16], 
    [0.16, 0.32, 0.48, 0.64, 0.08], [0.08, 0.48, 0.16, 0.32, 0.64], [0.64, 0.48, 0.32, 0.16, 0.08], [0.16, 0.64, 0.08, 0.32, 0.48], 
    [0.32, 0.08, 0.16, 0.64, 0.48], [0.64, 0.16, 0.48, 0.08, 0.32], [0.16, 0.08, 0.32, 0.64, 0.48], [0.64, 0.48, 0.16, 0.32, 0.08], 
    [0.08, 0.64, 0.48, 0.32, 0.16], [0.48, 0.16, 0.08, 0.64, 0.32], [0.48, 0.08, 0.32, 0.16, 0.64], [0.64, 0.08, 0.32, 0.16, 0.48], 
    [0.08, 0.32, 0.16, 0.64, 0.48], [0.16, 0.32, 0.48, 0.08, 0.64], [0.08, 0.64, 0.32, 0.48, 0.16], [0.16, 0.08, 0.48, 0.32, 0.64], 
    [0.48, 0.16, 0.32, 0.08, 0.64], [0.08, 0.64, 0.16, 0.48, 0.32], [0.16, 0.48, 0.64, 0.08, 0.32], [0.48, 0.32, 0.16, 0.64, 0.08], 
    [0.32, 0.16, 0.64, 0.48, 0.08], [0.08, 0.64, 0.48, 0.16, 0.32], [0.08, 0.48, 0.16, 0.32, 0.64], [0.64, 0.48, 0.16, 0.08, 0.32], 
    [0.08, 0.64, 0.32, 0.16, 0.48], [0.64, 0.48, 0.16, 0.32, 0.08], [0.48, 0.08, 0.64, 0.32, 0.16], [0.48, 0.64, 0.08, 0.16, 0.32], 
    [0.16, 0.08, 0.64, 0.32, 0.48], [0.64, 0.32, 0.48, 0.16, 0.08], [0.48, 0.08, 0.64, 0.32, 0.16], [0.08, 0.48, 0.16, 0.64, 0.32], 
    [0.32, 0.16, 0.08, 0.64, 0.48], [0.16, 0.64, 0.48, 0.32, 0.08], [0.48, 0.64, 0.08, 0.32, 0.16], [0.64, 0.48, 0.32, 0.08, 0.16], 
    [0.64, 0.16, 0.08, 0.48, 0.32], [0.48, 0.32, 0.16, 0.08, 0.64], [0.48, 0.08, 0.64, 0.16, 0.32], [0.08, 0.32, 0.16, 0.48, 0.64], 
    [0.32, 0.48, 0.64, 0.08, 0.16], [0.08, 0.16, 0.48, 0.64, 0.32], [0.16, 0.64, 0.48, 0.08, 0.32], [0.48, 0.64, 0.32, 0.08, 0.16], 
    [0.64, 0.48, 0.16, 0.08, 0.32], [0.16, 0.08, 0.64, 0.32, 0.48], [0.16, 0.32, 0.64, 0.08, 0.48], [0.48, 0.08, 0.64, 0.16, 0.32], 
    [0.32, 0.48, 0.64, 0.16, 0.08], [0.48, 0.32, 0.64, 0.08, 0.16], [0.64, 0.08, 0.48, 0.32, 0.16], [0.32, 0.48, 0.08, 0.64, 0.16], 
    [0.16, 0.48, 0.08, 0.32, 0.64], [0.16, 0.32, 0.48, 0.08, 0.64], [0.08, 0.48, 0.64, 0.32, 0.16], [0.64, 0.16, 0.08, 0.32, 0.48], 
    [0.16, 0.32, 0.08, 0.48, 0.64], [0.48, 0.16, 0.64, 0.32, 0.08], [0.32, 0.64, 0.48, 0.08, 0.16], [0.64, 0.32, 0.08, 0.48, 0.16], 
    [0.32, 0.16, 0.48, 0.64, 0.08], [0.64, 0.16, 0.32, 0.08, 0.48], [0.08, 0.64, 0.16, 0.32, 0.48], [0.32, 0.48, 0.16, 0.08, 0.64]]
    
# ======================== Add contrasts to the frame ====================== #
for ncp1 in range(9): #9
    for nn in range(len(contP)): # 6
        rph[ncp1][nn*2].insert(2, CP[ncp1*2][nn])
        rph[ncp1][nn*2+1].insert(2, CP[ncp1*2+1][nn])
        
        rpl[ncp1][nn*2].insert(2, CP[ncp1*2+2][nn])
        rpl[ncp1][nn*2+1].insert(2, CP[ncp1*2+3][nn])
        
        gph[ncp1][nn*2].insert(2, CP[ncp1*2+4][nn])
        gph[ncp1][nn*2+1].insert(2, CP[ncp1*2+5][nn])
        
        gpl[ncp1][nn*2].insert(2, CP[ncp1*2+6][nn])
        gpl[ncp1][nn*2+1].insert(2, CP[ncp1*2+7][nn])

for ncs1 in range(9): #9 times in 6 people
    for nn in range(len(contS)): # 6
        rsh[ncs1][nn*2].insert(2, CS[ncs1*2][nn])
        rsh[ncs1][nn*2+1].insert(2, CS[ncs1*2+1][nn])
        
        rsl[ncs1][nn*2].insert(2, CS[ncs1*2+2][nn])
        rsl[ncs1][nn*2+1].insert(2, CS[ncs1*2+3][nn])
        
        gsh[ncs1][nn*2].insert(2, CS[ncs1*2+4][nn])
        gsh[ncs1][nn*2+1].insert(2, CS[ncs1*2+5][nn])
        
        gsl[ncs1][nn*2].insert(2, CS[ncs1*2+6][nn])
        gsl[ncs1][nn*2+1].insert(2, CS[ncs1*2+7][nn])
        
p1,p2,p3,p4,p5,p6,p7,p8,p9 = [[[],[],[]] for _ in range(9)]

p1[0]=rph[0]+rsh[0]+gph[0]+gsh[0]
p1[1]=gpl[0]+rpl[0]+gsl[0]+rsl[0]
p1[2]=rsh[1]+gph[1]+gsh[1]+rph[1]

p2[0]=gpl[1]+rpl[1]+gsl[1]+rsl[1]
p2[1]=rsh[2]+gsh[2]+rph[2]+gph[2]
p2[2]=gpl[2]+gsl[2]+rpl[2]+rsl[2]

p3[0]=rsh[3]+gsh[3]+rph[3]+gph[3]
p3[1]=gsl[3]+gpl[3]+rsl[3]+rpl[3]
p3[2]=gph[4]+rph[4]+gsh[4]+rsh[4]

p4[0]=gsl[4]+gpl[4]+rsl[4]+rpl[4]
p4[1]=rsh[5]+gph[5]+gsh[5]+rph[5]
p4[2]=rpl[5]+rsl[5]+gpl[5]+gsl[5]

p5[0]=rsh[6]+gph[6]+gsh[6]+rph[6]
p5[1]=gpl[6]+gsl[6]+rpl[6]+rsl[6]
p5[2]=gsh[7]+gph[7]+rsh[7]+rph[7]

p6[0]=gpl[7]+gsl[7]+rpl[7]+rsl[7]
p6[1]=rph[8]+rsh[8]+gph[8]+gsh[8]
p6[2]=rsl[8]+gsl[8]+rpl[8]+gpl[8]

p7[0]=gpl[2]+gsl[2]+rpl[2]+rsl[2] #3rd set of p1
p7[1]=rsh[2]+gsh[2]+rph[2]+gph[2] #2nd set of p1
p7[2]=gpl[1]+rpl[1]+gsl[1]+rsl[1] #1st set of p1

p8[0]=rsh[1]+gph[1]+gsh[1]+rph[1] #3rd set of p2
p8[1]=gpl[0]+rpl[0]+gsl[0]+rsl[0] #2nd set of p2
p8[2]=rph[0]+rsh[0]+gph[0]+gsh[0] #1st set of p2

p9[0]=rpl[5]+rsl[5]+gpl[5]+gsl[5] #3rd set of p3
p9[1]=rsh[5]+gph[5]+gsh[5]+rph[5] #2nd set of p3
p9[2]=gsl[4]+gpl[4]+rsl[4]+rpl[4] #1st set of p3

participants=[p1]+[p2]+[p3]+[p4]+[p5]+[p6]+[p7]+[p8]+[p9]
#print(participants)
